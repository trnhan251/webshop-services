kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ template "shipping.fullname" . }}-config
  namespace: {{ .Release.Namespace }}
data:
  applicationYml: |
    server:
      port: {{ .Values.shipping.port }}

    spring:
      application.name: shipping
      main:
        web-application-type: reactive
        cloud-platform: kubernetes
      profiles.active: production

      datasource:
        url: jdbc:postgresql://${WEBSHOP_DB_HOST}:${WEBSHOP_DB_PORT}/${WEBSHOP_DB_DB}?useSSL=false&currentSchema=${WEBSHOP_SHIPPING_DB_SCHEMA}
        username: ${WEBSHOP_SHIPPING_DB_USERNAME}
        password: ${WEBSHOP_SHIPPING_DB_PASSWORD}
      jpa:
        properties.hibernate:
          dialect: org.hibernate.dialect.PostgreSQLDialect
          default_schema: ${WEBSHOP_SHIPPING_DB_SCHEMA}
        hibernate.ddl-auto: update
        generate-ddl: true
        show-sql: false

    management:
      server.port: {{ .Values.shipping.managementPort | int }}
      endpoint:
        metrics:
          enabled: true
        prometheus.enabled: true
        health.show-details: always
      metrics.export.prometheus.enabled: true
      endpoints.web.exposure.include: "*"
      health:
        circuitbreakers.enabled: true
        ratelimiters.enabled: true
        diskspace.enabled: false
      security.enabled: false

    logging.level.root: {{ .Values.shipping.loglevel }}

    resilience4j:
      circuitbreaker:
        configs:
          default:
            registerHealthIndicator: true
            minimumNumberOfCalls: 10
            waitDurationInOpenState: 20s
            failureRateThreshold: 50
            permittedNumberOfCallsInHalfOpenState: 3
            slidingWindowType: TIME_BASED
            slidingWindowSize: 100
            recordExceptions:
              - org.springframework.web.client.HttpServerErrorException
              - java.util.concurrent.TimeoutException
              - java.io.IOException
        instances:
          shipping:
            baseConfig: default
{{ include "shipping.r4j.circuitbreaker.shipping" . | indent 12 }}
          cost:
            baseConfig: default
{{ include "shipping.r4j.circuitbreaker.cost" . | indent 12 }}

      retry:
        configs:
          default:
            maxRetryAttempts: 3
            waitDuration: 1500
            enableExponentialBackoff: true
            exponentialBackoffMultiplier: 2.2
            retryExceptions:
              - org.springframework.web.client.HttpServerErrorException
              - java.io.IOException
        instances:
          shipping:
            baseConfig: default
{{ include "shipping.r4j.retry.shipping" . | indent 12 }}
          cost:
            baseConfig: default
{{ include "shipping.r4j.retry.cost" . | indent 12 }}

      thread-pool-bulkhead:
        configs:
          default:
            maxThreadPoolSize: 4
            coreThreadPoolSize: 1
            queueCapacity: 10
            keepAliveDuration: 200
        instances:
          shipping:
            baseConfig: default
{{ include "shipping.r4j.thread_pool_bulkhead.shipping" . | indent 12 }}
          cost:
            baseConfig: default
{{ include "shipping.r4j.thread_pool_bulkhead.cost" . | indent 12 }}

      ratelimiter:
        configs:
          default:
            registerHealthIndicator: true
            limitForPeriod: 10
            limitRefreshPeriod: 1s
            timeoutDuration: 0
        instances:
          shipping:
            baseConfig: default
{{ include "shipping.r4j.ratelimiter.shipping" . | indent 12 }}
          cost:
            baseConfig: default
{{ include "shipping.r4j.ratelimiter.cost" . | indent 12 }}

      timelimiter:
        configs:
          default:
            timeoutDuration: 5s
            cancelRunningFuture: true
        instances:
          shipping:
            baseConfig: default
{{ include "shipping.r4j.timelimiter.shipping" . | indent 12 }}
          cost:
            baseConfig: default
{{ include "shipping.r4j.timelimiter.cost" . | indent 12 }}
